/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as AboutImport } from './routes/about'
import { Route as IndexImport } from './routes/index'
import { Route as authRegisterImport } from './routes/(auth)/register'
import { Route as authLoginImport } from './routes/(auth)/login'
import { Route as appPatientsIndexImport } from './routes/(app)/patients/index'
import { Route as appPatientsAddImport } from './routes/(app)/patients/add'
import { Route as appPatientsPatientIdImport } from './routes/(app)/patients/$patientId'
import { Route as appPatientsPatientIdNotesImport } from './routes/(app)/patients_/$patientId/notes'
import { Route as appPatientsPatientIdEditImport } from './routes/(app)/patients_/$patientId/edit'

// Create/Update Routes

const AboutRoute = AboutImport.update({
  id: '/about',
  path: '/about',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const authRegisterRoute = authRegisterImport.update({
  id: '/(auth)/register',
  path: '/register',
  getParentRoute: () => rootRoute,
} as any)

const authLoginRoute = authLoginImport.update({
  id: '/(auth)/login',
  path: '/login',
  getParentRoute: () => rootRoute,
} as any)

const appPatientsIndexRoute = appPatientsIndexImport.update({
  id: '/(app)/patients/',
  path: '/patients/',
  getParentRoute: () => rootRoute,
} as any)

const appPatientsAddRoute = appPatientsAddImport.update({
  id: '/(app)/patients/add',
  path: '/patients/add',
  getParentRoute: () => rootRoute,
} as any)

const appPatientsPatientIdRoute = appPatientsPatientIdImport.update({
  id: '/(app)/patients/$patientId',
  path: '/patients/$patientId',
  getParentRoute: () => rootRoute,
} as any)

const appPatientsPatientIdNotesRoute = appPatientsPatientIdNotesImport.update({
  id: '/(app)/patients_/$patientId/notes',
  path: '/patients/$patientId/notes',
  getParentRoute: () => rootRoute,
} as any)

const appPatientsPatientIdEditRoute = appPatientsPatientIdEditImport.update({
  id: '/(app)/patients_/$patientId/edit',
  path: '/patients/$patientId/edit',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/about': {
      id: '/about'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof AboutImport
      parentRoute: typeof rootRoute
    }
    '/(auth)/login': {
      id: '/(auth)/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof authLoginImport
      parentRoute: typeof rootRoute
    }
    '/(auth)/register': {
      id: '/(auth)/register'
      path: '/register'
      fullPath: '/register'
      preLoaderRoute: typeof authRegisterImport
      parentRoute: typeof rootRoute
    }
    '/(app)/patients/$patientId': {
      id: '/(app)/patients/$patientId'
      path: '/patients/$patientId'
      fullPath: '/patients/$patientId'
      preLoaderRoute: typeof appPatientsPatientIdImport
      parentRoute: typeof rootRoute
    }
    '/(app)/patients/add': {
      id: '/(app)/patients/add'
      path: '/patients/add'
      fullPath: '/patients/add'
      preLoaderRoute: typeof appPatientsAddImport
      parentRoute: typeof rootRoute
    }
    '/(app)/patients/': {
      id: '/(app)/patients/'
      path: '/patients'
      fullPath: '/patients'
      preLoaderRoute: typeof appPatientsIndexImport
      parentRoute: typeof rootRoute
    }
    '/(app)/patients_/$patientId/edit': {
      id: '/(app)/patients_/$patientId/edit'
      path: '/patients/$patientId/edit'
      fullPath: '/patients/$patientId/edit'
      preLoaderRoute: typeof appPatientsPatientIdEditImport
      parentRoute: typeof rootRoute
    }
    '/(app)/patients_/$patientId/notes': {
      id: '/(app)/patients_/$patientId/notes'
      path: '/patients/$patientId/notes'
      fullPath: '/patients/$patientId/notes'
      preLoaderRoute: typeof appPatientsPatientIdNotesImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/login': typeof authLoginRoute
  '/register': typeof authRegisterRoute
  '/patients/$patientId': typeof appPatientsPatientIdRoute
  '/patients/add': typeof appPatientsAddRoute
  '/patients': typeof appPatientsIndexRoute
  '/patients/$patientId/edit': typeof appPatientsPatientIdEditRoute
  '/patients/$patientId/notes': typeof appPatientsPatientIdNotesRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/login': typeof authLoginRoute
  '/register': typeof authRegisterRoute
  '/patients/$patientId': typeof appPatientsPatientIdRoute
  '/patients/add': typeof appPatientsAddRoute
  '/patients': typeof appPatientsIndexRoute
  '/patients/$patientId/edit': typeof appPatientsPatientIdEditRoute
  '/patients/$patientId/notes': typeof appPatientsPatientIdNotesRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/(auth)/login': typeof authLoginRoute
  '/(auth)/register': typeof authRegisterRoute
  '/(app)/patients/$patientId': typeof appPatientsPatientIdRoute
  '/(app)/patients/add': typeof appPatientsAddRoute
  '/(app)/patients/': typeof appPatientsIndexRoute
  '/(app)/patients_/$patientId/edit': typeof appPatientsPatientIdEditRoute
  '/(app)/patients_/$patientId/notes': typeof appPatientsPatientIdNotesRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/about'
    | '/login'
    | '/register'
    | '/patients/$patientId'
    | '/patients/add'
    | '/patients'
    | '/patients/$patientId/edit'
    | '/patients/$patientId/notes'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/about'
    | '/login'
    | '/register'
    | '/patients/$patientId'
    | '/patients/add'
    | '/patients'
    | '/patients/$patientId/edit'
    | '/patients/$patientId/notes'
  id:
    | '__root__'
    | '/'
    | '/about'
    | '/(auth)/login'
    | '/(auth)/register'
    | '/(app)/patients/$patientId'
    | '/(app)/patients/add'
    | '/(app)/patients/'
    | '/(app)/patients_/$patientId/edit'
    | '/(app)/patients_/$patientId/notes'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AboutRoute: typeof AboutRoute
  authLoginRoute: typeof authLoginRoute
  authRegisterRoute: typeof authRegisterRoute
  appPatientsPatientIdRoute: typeof appPatientsPatientIdRoute
  appPatientsAddRoute: typeof appPatientsAddRoute
  appPatientsIndexRoute: typeof appPatientsIndexRoute
  appPatientsPatientIdEditRoute: typeof appPatientsPatientIdEditRoute
  appPatientsPatientIdNotesRoute: typeof appPatientsPatientIdNotesRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AboutRoute: AboutRoute,
  authLoginRoute: authLoginRoute,
  authRegisterRoute: authRegisterRoute,
  appPatientsPatientIdRoute: appPatientsPatientIdRoute,
  appPatientsAddRoute: appPatientsAddRoute,
  appPatientsIndexRoute: appPatientsIndexRoute,
  appPatientsPatientIdEditRoute: appPatientsPatientIdEditRoute,
  appPatientsPatientIdNotesRoute: appPatientsPatientIdNotesRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/about",
        "/(auth)/login",
        "/(auth)/register",
        "/(app)/patients/$patientId",
        "/(app)/patients/add",
        "/(app)/patients/",
        "/(app)/patients_/$patientId/edit",
        "/(app)/patients_/$patientId/notes"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/about": {
      "filePath": "about.tsx"
    },
    "/(auth)/login": {
      "filePath": "(auth)/login.tsx"
    },
    "/(auth)/register": {
      "filePath": "(auth)/register.tsx"
    },
    "/(app)/patients/$patientId": {
      "filePath": "(app)/patients/$patientId.tsx"
    },
    "/(app)/patients/add": {
      "filePath": "(app)/patients/add.tsx"
    },
    "/(app)/patients/": {
      "filePath": "(app)/patients/index.tsx"
    },
    "/(app)/patients_/$patientId/edit": {
      "filePath": "(app)/patients_/$patientId/edit.tsx"
    },
    "/(app)/patients_/$patientId/notes": {
      "filePath": "(app)/patients_/$patientId/notes.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
